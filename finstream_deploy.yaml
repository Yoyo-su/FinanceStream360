AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FinanceStream360 data pipeline infrastructure CloudFormation stack

# Parameters:
#   Key:
#     Type: String
#     Default: Project
#   Value:
#     Type: String
#     Default: FinanceStream360

Resources:
# Lambda Function (Finnhub Connection)
  FinnhubConnFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: lambda.zip
      Description: AWS Lambda Function utilising Finnhub websocket to feed Kinesis data stream
      Environment:
        Variables:
          REGION_NAME: !Ref AWS::Region
          KDS_NAME: !Ref FinnhubStream
      FunctionName: finnhub-connection-lambda
      Handler: finnhub_conn.lambda_handler
      MemorySize: 128
      Runtime: python3.13
      Timeout: 10
      Tags:
          - Key: Project 
            Value: FinanceStream360
          - Key: Environment 
            Value: Dev
      # Events:
        # implement trigger
      Role: !GetAtt FinConnFuncRole.Arn
  WebSocketLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: WebSocketLayer
      Description: My websocket Layer
      Content:
        S3Bucket: fin360-bucket-ss25
        S3Key: websocket_layer.zip
      CompatibleRuntimes:
        - python3.9
        - python3.10
        - python3.11
        - python3.13
# IAM Role for Lambda Function
  FinConnFuncRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub 'KinesisLambdaConsumerRole-${AWS::StackName}'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: LambdaFunctionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Join [ ":" , ["arn:aws:logs",!Ref AWS::Region,!Ref AWS::AccountId,"*" ] ]
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Join [ ":" , ["arn:aws:logs",!Ref AWS::Region,!Ref AWS::AccountId,"log-group:/aws/lambda/finstream-*:*" ] ]

# Kinesis Data Stream
  FinnhubStream:
    Type: AWS::Kinesis::Stream
    Properties:
        Name: FinnhubStream
        RetentionPeriodHours: 24
        StreamModeDetails:
          StreamMode: ON_DEMAND
        # StreamEncryption:
        #     EncryptionType: KMS
        #     KeyId: !Ref FinstreamKey
        Tags:
            - Key: Project
              Value: FinanceStream360
            - Key: Environment
              Value: Dev

# DynamoDB Table
  # FinStream:
  #   Type: AWS::Serverless::SimpleTable
  #   Properties:
  #     PrimaryKey:
  #       Name: greeting
  #       Type: String
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 2
  #       WriteCapacityUnits: 2

# KMS Encryption Key
  # FinstreamKey:
  #   Type: 'AWS::KMS::Key'
  #   Properties:
  #     KeyPolicy:
  #       Version: 2012-10-17
  #       Id: key-default-1
  #       Statement:
  #         - Sid: Enable IAM User Permissions
  #           Effect: Allow
  #           Principal:
  #             AWS: !Join
  #               - ''
  #               - - 'arn:aws:iam::'
  #                 - !Ref 'AWS::AccountId'
  #                 - ':root'
  #           Action: 'kms:*'
  #           Resource: '*'
  #     Tags:
  #       - Key: !Ref Key
  #         Value: !Ref Value
    # Parameters:
    #   Key:
    #     Type: String
    #   Value:
    #     Type: String
